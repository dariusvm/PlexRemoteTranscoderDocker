#!/usr/bin/python
# This software is created reusing code from Weston Nielson <wnielson@github> https://github.com/wnielson/Plex-Remote-Transcoder
# Version 0.0.1 - Isaac Aymerich <isaac.aymerich@gmail.com>
#

import cgi
import filecmp
import json
import codecs
import logging
import logging.config
import multiprocessing
import io
import os
import base64
import requests
import pipes
import re
import shlex
import shutil
import subprocess
import sys
import time
import urlparse
import socket
from contextlib import closing
#import urllib.parse as urlparse

from distutils.spawn import find_executable


PROPERTIES = {}
with open('/config/transcoderProvider.properties') as f:
    for line in f:
        key, value = line.split('=')
        PROPERTIES[key] = value.strip()        


log = logging.getLogger("prt")
TRANSCODER_DIR  = "/usr/lib/plexmediaserver/Resources/"
LD_LIBRARY_PATH = "/usr/lib/plexmediaserver/"
LOG_PATH        = "/config/Library/Application Support/Plex Media Server/Logs/"
NEW_TRANSCODER_NAME = "plex_transcoder"
DEFAULT_CONFIG = {
    "ipaddress": "",
    "path_script":    None,
    "servers_script": None,
    "servers":   {},
    "logging":   {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "simple": {
                "format": "%(asctime)s - %(levelname)s - %(message)s"
            }
        },
        "handlers": {
            "file_handler": {
                "class": "logging.handlers.RotatingFileHandler",
                "level": "INFO",
                "formatter": "simple",
                "filename": LOG_PATH + "Plex Remote Transcoder.log",
                "maxBytes": 10485760,
                "backupCount": 20,
                "encoding": "utf8"
            },
        },
        "loggers": {
            "prt": {
                "level": "DEBUG",
                "handlers": ["file_handler"],
                "propagate": "no"
            }
        }
    }
}

def setup_logging():
    config = DEFAULT_CONFIG.copy()
    logging.config.dictConfig(config["logging"])

def get_transcoder_path(name=NEW_TRANSCODER_NAME):
    return os.path.join(TRANSCODER_DIR, name)



def transcode_local(args):
    log.info("Launching Transcode Local: %s\n" % args)
    proc = subprocess.Popen(args)
    proc.wait()
    return proc.returncode

def transcode_remote(args):
    log.info("propiedades %s " % PROPERTIES['PUBLIC_DOMAIN'])
    log.info("Launching command line: %s\n" % str(args))

    session = get_transcode_session_details(args)
    log.info("Session details: %s" % str(session))
    
    REMOTE_ARGS = ("export LD_LIBRARY_PATH=%(ld_path)s;"
               "cd %(working_dir)s;"
               "%(args)s")

    transcoderVM = getTranscoder(session)
    firstRequest = time.time()
    timeout = False
    waitProcess = None
    if transcoderVM['machineStatus']!='active':
       #type="mkv"
       #mainArgs = [args[0],'-i','/waitvideo.mp4','-map', '0', '-codec', 'copy','-progressurl',args[args.index('-progressurl')+1]]
       #finalArgs = []
       #if type=="mkv":
       #   finalArgs = mainArgs + [ '-f', 'matroska', '-', '-f', 'null']
       #log.info("Executing Local Wait Video:%s" % str(finalArgs))
       waitProcess = subprocess.Popen(args)
    while (transcoderVM['machineStatus']!='active') & (timeout == False):
        log.info("Transcoder %s - %s is not ready waitting for ready" % (transcoderVM['machineID'],transcoderVM['name']))
        time.sleep(2)
        timeout = (time.time()-firstRequest) > 300
        transcoderVM = getTranscoder(session)
        
    if waitProcess is not None:
       time.sleep(10)
       waitProcess.terminate() 
       return 1
    if timeout == False:
       log.info("Transcoder %s - %s is ready to transcode" % (transcoderVM['machineID'],transcoderVM['name']))
       while (check_ssh(transcoderVM['ip'])!=0):
           time.sleep(1)
           log.info("waitting for ssh be ready")
       #Find media file and replace to WebServer URL
       posInput = args.index("-i")
       mediaFilePath = args[posInput+1]
       if not mediaFilePath.startswith("http"):
          encodedMediaFilePath=base64.b64encode(mediaFilePath)
          args[posInput+1] = "http://"+PROPERTIES['PUBLIC_DOMAIN']+":8800/download/"+str(transcoderVM['machineID'])+"/"+encodedMediaFilePath+"?absolute=1"
       command = REMOTE_ARGS % {
           "ld_path":      "%s" % LD_LIBRARY_PATH,
           "working_dir":  os.getcwd(),
           "args":         ' '.join([pipes.quote(a) for a in args])
       }

       command = command.replace("127.0.0.1:32400", "%s:%s" % (PROPERTIES['PUBLIC_DOMAIN'], PROPERTIES['PLEX_PUBLIC_PORT']))
       args = ["/usr/bin/ssh","-o","StrictHostKeyChecking=no", "%s@%s"  % ("abc", transcoderVM['ip']), "%s" % str(command)]
       log.info("Executing Remote Transcoding:%s" % str(args))
       proc = subprocess.Popen(args)
       proc.wait()
       return proc.returncode


def getTranscoder(session):
    headers = {'content-type': 'application/json'}
    response = requests.post("http://"+PROPERTIES['PRIVATE_WEB_DOMAIN']+":8800/getTranscoder", json=session)
    reader = codecs.getreader("utf-8")
    binary = response.content
    return json.loads(response.content.decode('utf-8'))

def get_transcode_session_details(args):
    session_details = {}
    
    # Try to find the session ID in the args
    session_id = None
    for arg in args:
        if arg.find("video/:/transcode") > -1:
            session_id = arg.split("transcode/session/")[-1].split("/")[0]
            break

    # Open the plex log file and look for the session details
    fh = None
    if session_id:
        try:
            fh = io.open((LOG_PATH+"Plex Media Server.log"), "r",encoding='utf-8', errors='ignore')
        except Exception, e:
            log.error(e)
            log.info("Couldn't open Plex log file: %s" % LOG_PATH+"Plex Media Server.log")

    if fh:
        # Seek back from the end of the log file
        #fh.seek(-8192, 2)
        for line in fh.readlines():
            if line.find("/video/:/transcode/") > -1:
                url = urlparse.urlparse(line.split("/video/:/transcode/")[-1].split(" ")[0])
                details = dict(cgi.parse_qsl(url.query))
                if details.get("session") == session_id:
                    session_details.update(details)
        fh.close()
    return session_details

def requireRemoveParam(param,removableParams):
    for removableParam in removableParams:
        if removableParam[0] == '*':
            return param == removableParam.replace(removableParam[:1], '')
        elif param.find(removableParam) > -1:
            return 1
    return 0

def requireModifyParam(param,modifyParams):
    for modifyParam in modifyParams:
        if param.find(modifyParam[0]) > -1:
            return modifyParam[1]
    return None



def parseParams(arguments):
    removeParams = ['-filter_complex','-crf','-pix_fmt','-preset','-x264opts','-force_key_frames','-maxrate','-bufsize','-level','-map_inlineass']
    replaceParams = [['libx264','copy'],['[0]','0:0']]

    newArgs = []
    nextArgJump=0
    for arg in arguments:
        if arg.find("video/:/transcode") > -1:
           arg = arg.replace("127.0.0.1:32400","192.168.0.133:8800")
        if requireRemoveParam(arg,removeParams)==1:
            nextArgJump=1
        elif nextArgJump==0:
            newArgs.append(arg)
        else:
            nextArgJump=0

    newArgsModified = []
    for arg in newArgs:
        nextReplaceParamPosible = requireModifyParam(arg,replaceParams)
        if nextReplaceParamPosible is not None:
            newArgsModified.append(nextReplaceParamPosible)
            if nextReplaceParamPosible == "copy":
                #Internet explorer segment_format mpegts require mp4toannexb to work
                if "-segment_format" in arguments:
                    pos = arguments.index("-segment_format")
                    if arguments[pos+1] == "mpegts"  and "h264_mp4toannexb,h264_plex" not in arguments:
                        newArgsModified.append('-bsf:0')
                        newArgsModified.append('h264_mp4toannexb,h264_plex')

        else:
            newArgsModified.append(arg)
    #newArgsModified.append('-map')
    #newArgsModified.append('0')
    return newArgsModified

def check_ssh(host):
    comand = ["/usr/bin/ssh", "-o" ,"StrictHostKeyChecking=no" , "root@%s" % host, "echo 'isRunning'"]
    p = subprocess.Popen(comand,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    result = p.communicate()[0]
    if "isRunning" in result:
        return 0
    else:
        return 1

setup_logging()
try:
    # The transcoder needs to have the propery LD_LIBRARY_PATH
    # set, otherwise it cannot run
    os.environ["LD_LIBRARY_PATH"] = "%s:$LD_LIBRARY_PATH" % LD_LIBRARY_PATH

    args = [get_transcoder_path()] + sys.argv[1:]
    transcodeType="local"
    returnCode = 0
    for param in args:
        if param == "libx264":
            transcodeType="remote"
            break

    if transcodeType=="remote":
        returnCode = transcode_remote(args)
    elif transcodeType=="local":
        returnCode = transcode_local(args)

    sys.exit(returnCode)
except Exception, e:
    log.error(e)
